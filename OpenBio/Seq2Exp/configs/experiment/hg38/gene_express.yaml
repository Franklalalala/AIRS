# @package _global_
defaults:
  - /trainer: default
  - /loader: null
  - /optimizer: adamw
  - /callbacks: [base, checkpoint]
  - /task: gene_pred
  - /dataset: promo_enhan_inter
  - /model: gene_express_former
  - /scheduler: cosine_warmup_timm

#task:
#  _name_: gene_expression
#  loss:
#    _name_: smooth_l1_loss

encoder: null
decoder: null

loader:
#  num_workers: ${eval:"len(__import__('os').sched_getaffinity(0))"}
  num_workers: ${dataset.num_workers}
  pin_memory: ${dataset.pin_memory}
  drop_last: ${dataset.drop_last}  # There's enough data and epochs, ignore the edge case
  # shuffle: True

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: null  # 20
  max_steps: 50000
  precision: bf16  # bf16 only a100
  gradient_clip_val: 1.0
  limit_val_batches: 1.0
#  limit_test_batches: 3
#  limit_train_batches: 10
  val_check_interval: 0.5

dataset:
  dataset_name: 'gene_express'
  expr_type: 'CAGE'  # or RNA
  cell_type: 'K562'
  seq_range: 200_000
  tokenizer_name: one_hot
  pretrained_model: False
  pretrained_model_name: "kuleshov-group/caduceus-ph_seqlen-131k_d_model-256_n_layer-16"
  # kuleshov-group/caduceus-ph_seqlen-131k_d_model-256_n_layer-16
  # kuleshov-group/caduceus-ph_seqlen-1k_d_model-256_n_layer-4_lr-8e-3
  blacklist_ver: 'v1'

  batch_size: 8
  batch_size_eval: ${.batch_size}

  zero_dist: False
  zero_activity: False
  zero_hic: False
  omit_enhancers: False
  only_seqs: False

model:
  config:
    seq_range: ${dataset.seq_range}

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${trainer.max_steps}-${.warmup_t}}
  warmup_prefix: True
  warmup_lr_init: 1e-5
  warmup_t: ${eval:0.1*${trainer.max_steps}}
  lr_min: 1e-4


optimizer:
  lr: 5e-4
  weight_decay: 1e-6
  betas: [0.9, 0.95]

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: ${eval:${dataset.batch_size}*${trainer.devices}}  # effects the scheduler, need to set properly
  cross_validation: true
  remove_val_loader_in_eval: False
  remove_test_loader_in_eval: true  # test only at the end of training
  monitor: val/mse
  mode: min
